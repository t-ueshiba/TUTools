# Check if SIMD instructions are available on the machine where 
# the project is compiled.

MACRO (FindSIMD)

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
  EXEC_PROGRAM(cat ARGS "/proc/cpuinfo" OUTPUT_VARIABLE CPUINFO)

  STRING(REGEX REPLACE "^.*(sse2).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "sse2" "${SIMD_THERE}" SSE2_TRUE)
  IF (SSE2_TRUE)
    set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
  ELSE (SSE2_TRUE)
    set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
  ENDIF (SSE2_TRUE)

  # /proc/cpuinfo apparently omits sse3 :(
  STRING(REGEX REPLACE "^.*[^s](sse3).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "sse3" "${SIMD_THERE}" SSE3_TRUE)
  IF (NOT SSE3_TRUE)
    STRING(REGEX REPLACE "^.*(T2300).*$" "\\1" SIMD_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "T2300" "${SIMD_THERE}" SSE3_TRUE)
  ENDIF (NOT SSE3_TRUE)

  STRING(REGEX REPLACE "^.*(ssse3).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "ssse3" "${SIMD_THERE}" SSSE3_TRUE)
  IF (SSE3_TRUE OR SSSE3_TRUE)
    set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
  ELSE (SSE3_TRUE OR SSSE3_TRUE)
    set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
  ENDIF (SSE3_TRUE OR SSSE3_TRUE)
  IF (SSSE3_TRUE)
    set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
  ELSE (SSSE3_TRUE)
    set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
  ENDIF (SSSE3_TRUE)

  STRING(REGEX REPLACE "^.*(sse4_1).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "sse4_1" "${SIMD_THERE}" SSE41_TRUE)
  IF (SSE41_TRUE)
    set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
  ELSE (SSE41_TRUE)
    set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
  ENDIF (SSE41_TRUE)

  STRING(REGEX REPLACE "^.*(sse4_2).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "sse4_2" "${SIMD_THERE}" SSE42_TRUE)
  IF (SSE42_TRUE)
    set(SSE4_2_FOUND true CACHE BOOL "SSE4.2 available on host")
  ELSE (SSE42_TRUE)
    set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
  ENDIF (SSE42_TRUE)

  STRING(REGEX REPLACE "^.*(avx).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "avx" "${SIMD_THERE}" AVX_TRUE)
  IF (AVX_TRUE)
    set(AVX_FOUND true CACHE BOOL "AVX available on host")
  ELSE (AVX_TRUE)
    set(AVX_FOUND false CACHE BOOL "AVX available on host")
  ENDIF (AVX_TRUE)

  STRING(REGEX REPLACE "^.*(avx2).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "avx2" "${SIMD_THERE}" AVX2_TRUE)
  IF (AVX2_TRUE)
    set(AVX2_FOUND true CACHE BOOL "AVX2 available on host")
  ELSE (AVX2_TRUE)
    set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
  ENDIF (AVX2_TRUE)

  STRING(REGEX REPLACE "^.*(neon).*$" "\\1" SIMD_THERE ${CPUINFO})
  STRING(COMPARE EQUAL "neon" "${SIMD_THERE}" NEON_TRUE)
  IF (NEON_TRUE)
    set(NEON_FOUND true CACHE BOOL "NEON available on host")
  ELSE (NEON_TRUE)
    set(NEON_FOUND false CACHE BOOL "NEON available on host")
  ENDIF (NEON_TRUE)

ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
  EXEC_PROGRAM("/usr/sbin/sysctl -n hw.machine" OUTPUT_VARIABLE CPUINFO)
  STRING(COMPARE EQUAL "arm64" "${CPUINFO}" ARM64_TRUE)
  IF (ARM64_TRUE)
#    set(NEON_FOUND true CACHE BOOL "NEON available on host")
    set(NEON_FOUND false)
  ELSE (ARM64_TRUE)
    EXEC_PROGRAM("/usr/sbin/sysctl -n machdep.cpu.leaf7_features"
		 OUTPUT_VARIABLE LEAF7_CPUINFO)

    STRING(REGEX REPLACE "^.*[^S](SSE2).*$" "\\1" SIMD_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "SSE2" "${SIMD_THERE}" SSE2_TRUE)
    IF (SSE2_TRUE)
      set(SSE2_FOUND true CACHE BOOL "SSE2 available on host")
    ELSE (SSE2_TRUE)
      set(SSE2_FOUND false CACHE BOOL "SSE2 available on host")
    ENDIF (SSE2_TRUE)

    STRING(REGEX REPLACE "^.*[^S](SSE3).*$" "\\1" SIMD_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "SSE3" "${SIMD_THERE}" SSE3_TRUE)
    IF (SSE3_TRUE)
      set(SSE3_FOUND true CACHE BOOL "SSE3 available on host")
    ELSE (SSE3_TRUE)
      set(SSE3_FOUND false CACHE BOOL "SSE3 available on host")
    ENDIF (SSE3_TRUE)

    STRING(REGEX REPLACE "^.*(SSSE3).*$" "\\1" SIMD_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "SSSE3" "${SIMD_THERE}" SSSE3_TRUE)
    IF (SSSE3_TRUE)
      set(SSSE3_FOUND true CACHE BOOL "SSSE3 available on host")
    ELSE (SSSE3_TRUE)
      set(SSSE3_FOUND false CACHE BOOL "SSSE3 available on host")
    ENDIF (SSSE3_TRUE)

    STRING(REGEX REPLACE "^.*(SSE4.1).*$" "\\1" SIMD_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "SSE4.1" "${SIMD_THERE}" SSE41_TRUE)
    IF (SSE41_TRUE)
      set(SSE4_1_FOUND true CACHE BOOL "SSE4.1 available on host")
    ELSE (SSE41_TRUE)
      set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
    ENDIF (SSE41_TRUE)

    STRING(REGEX REPLACE "^.*(SSE4.2).*$" "\\1" SIMD_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "SSE4.2" "${SIMD_THERE}" SSE42_TRUE)
    IF (SSE42_TRUE)
      set(SSE4_2_FOUND true CACHE BOOL "SSE4.2 available on host")
    ELSE (SSE42_TRUE)
      set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
    ENDIF (SSE42_TRUE)

    STRING(REGEX REPLACE "^.*(AVX1.0).*$" "\\1" SIMD_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "AVX1.0" "${SIMD_THERE}" AVX_TRUE)
    IF (AVX_TRUE)
      set(AVX_FOUND true CACHE BOOL "AVX available on host")
    ELSE (AVX_TRUE)
      set(AVX_FOUND false CACHE BOOL "AVX available on host")
    ENDIF (AVX_TRUE)

    STRING(REGEX REPLACE "^.*(AVX2).*$" "\\1" SIMD_THERE ${LEAF7_CPUINFO})
    STRING(COMPARE EQUAL "AVX2" "${SIMD_THERE}" AVX2_TRUE)
    IF (AVX2_TRUE)
      set(AVX2_FOUND true CACHE BOOL "AVX2 available on host")
    ELSE (AVX2_TRUE)
      set(AVX2_FOUND false CACHE BOOL "AVX2 available on host")
    ENDIF (AVX2_TRUE)
  ENDIF (ARM64_TRUE)

ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
  # TODO
  set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
  set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
  set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
  set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
  set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
  set(AVX_FOUND    false CACHE BOOL "AVX available on host")
  set(AVX2_FOUND   false CACHE BOOL "AVX2 available on host")
ELSE(CMAKE_SYSTEM_NAME MATCHES "Linux")
  set(SSE2_FOUND   true  CACHE BOOL "SSE2 available on host")
  set(SSE3_FOUND   false CACHE BOOL "SSE3 available on host")
  set(SSSE3_FOUND  false CACHE BOOL "SSSE3 available on host")
  set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host")
  set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host")
  set(AVX_FOUND    false CACHE BOOL "AVX available on host")
  set(AVX2_FOUND   false CACHE BOOL "AVX2 available on host")
ENDIF(CMAKE_SYSTEM_NAME MATCHES "Linux")

IF(CMAKE_COMPILER_IS_GNUCXX)
  EXECUTE_PROCESS(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion
		  OUTPUT_VARIABLE GCC_VERSION)
  IF(GCC_VERSION VERSION_LESS 4.2)
    set(SSE4_1_FOUND false CACHE BOOL "SSE4.1 available on host" FORCE)
    set(SSE4_2_FOUND false CACHE BOOL "SSE4.2 available on host" FORCE)
    set(AVX_FOUND    false CACHE BOOL "AVX available on host" FORCE)
    set(AVX2_FOUND   false CACHE BOOL "AVX2 available on host" FORCE)
  ENDIF()
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

if(SSE2_FOUND)
  MESSAGE(STATUS "Found support for SSE2 on this machine.")
endif(SSE2_FOUND)
if(SSE3_FOUND)
  MESSAGE(STATUS "Found support for SSE3 on this machine.")
endif(SSE3_FOUND)
if(SSSE3_FOUND)
  MESSAGE(STATUS "Found support for SSSE3 on this machine.")
endif(SSSE3_FOUND)
if(SSE4_1_FOUND)
  MESSAGE(STATUS "Found support for SSE4.1 on this machine.")
endif(SSE4_1_FOUND)
if(SSE4_2_FOUND)
  MESSAGE(STATUS "Found support for SSE4.2 on this machine.")
endif(SSE4_2_FOUND)
if(AVX_FOUND)
  MESSAGE(STATUS "Found support for AVX on this machine.")
endif(AVX_FOUND)
if(AVX2_FOUND)
  MESSAGE(STATUS "Found support for AVX2 on this machine.")
endif(AVX2_FOUND)
if(NEON_FOUND)
  MESSAGE(STATUS "Found support for NEON on this machine.")
endif(NEON_FOUND)

mark_as_advanced(SSE2_FOUND SSE3_FOUND SSSE3_FOUND SSE4_1_FOUND SSE4_2_FOUND AVX_FOUND AVX2_FOUND NEON_FOUND)

ENDMACRO(FindSIMD)

